#!/usr/bin/env node

const program = require('commander');
const migrate = require('../lib/migrate.js');
const mysql = require('mysql');

program
  .description('setup database for testing. This will drop and recreate the database')
  .option('-h, --host [host]', 'MySQL host', process.env.MYSQL_HOST || '127.0.0.1')
  .option('-u, --user [user]', 'MySQL user name', process.env.MYSQL_USER || '')
  .option('-p, --password [password]', 'MySQL password', process.env.MYSQL_PWD || '')
  .option('-P, --port [port]', 'MySQL port', process.env.MYSQL_PORT || '3306')
  .arguments('migrate <database>');

program.parse(process.argv);

if (program.args.length != 1) {
  program.help();
}

// Connect to server
const connection = mysql.createConnection({
  host: program.host,
  port: program.port,
  user: program.user,
  password: program.password,
  multipleStatements: true,
  dateStrings: true,
  charset: 'utf8mb4_unicode_ci',
  timezone: 'Z'
});

console.log(`Connecting to ${program.host}:${program.port}/${program.args[0]}`);

setup()
  .then(() => {
    console.log('Test setup complete');
    connection.destroy();
  })
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });


async function setup() {
  console.log(`Dropping and creating database ${program.args[0]}`);
  await query(`DROP DATABASE IF EXISTS ${program.args[0]}`);
  await query(`
    CREATE DATABASE ${program.args[0]}
    DEFAULT CHARACTER SET utf8mb4
    DEFAULT COLLATE utf8mb4_unicode_ci
  `);
  await query(`use ${program.args[0]}`);
  return migrate({
    connection,
    createMetaTable: true,
  });
}

function query(sql, values = []) {
  return new Promise((resolve, reject) => {
    connection.query(sql, values, (error, results) => {
      if (error) {
        reject(error);
      } else {
        resolve(results);
      }
    });
  });
}
